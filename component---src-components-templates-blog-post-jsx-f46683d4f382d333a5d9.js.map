{"version":3,"sources":["webpack:///./src/components/atoms/TagButton.jsx","webpack:///./src/components/molecules/TagList.jsx","webpack:///./src/components/molecules/RecentPostItem.jsx","webpack:///./src/components/organisms/RecentPostList.jsx","webpack:///./src/components/templates/BlogPost.jsx"],"names":["StyledLink","styled","Link","StyledButton","span","props","theme","tag","back","text","TagButton","children","link","to","Container","div","TagList","data","map","node","key","display","Cover","image","recentpostitem","RecentPostItem","fields","slug","frontmatter","cover","childImageSharp","fixed","src","TextEllipsis","line","title","date","PostList","recentpostlist","header","category","RecentPostList","id","index","PostHeader","blogpost","hr","info","PostContent","content","default","quote","PostFooter","pageQuery","BlogPost","post","markdownRemark","siteTitle","site","siteMetadata","tags","recent","pageContext","Layout","activeMenu","location","SEO","description","excerpt","fluid","keywords","PostInfo","className","dangerouslySetInnerHTML","__html","html"],"mappings":"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","file":"component---src-components-templates-blog-post-jsx-f46683d4f382d333a5d9.js","sourcesContent":["import { Link } from 'gatsby';\nimport React from 'react';\nimport styled from 'styled-components';\n\nconst StyledLink = styled(Link)`\n  margin: 5px 10px 5px 0;\n`;\n\nconst StyledButton = styled.span`\n  background-color: ${props => props.theme.tag.back};\n  border-radius: 5px;\n  color: ${props => props.theme.tag.text};\n  font-size: 15px;\n  padding: 5px 10px;\n\n  &:hover {\n    text-decoration: underline;\n  }\n`;\n\nconst TagButton = ({ children, link }) => {\n  return (\n    <StyledLink to={`/${link}`}>\n      <StyledButton>{children}</StyledButton>\n    </StyledLink>\n  );\n};\n\nexport default TagButton;\n","import React from 'react';\nimport styled from 'styled-components';\n\nimport TagButton from '../atoms/TagButton';\n\nconst Container = styled.div``;\n\nconst TagList = ({ data }) => {\n  return (\n    <Container>\n      {data &&\n        data.map(node => (\n          <TagButton key={node} link={`tags/${node}`}>\n            #{node}\n          </TagButton>\n        ))}\n    </Container>\n  );\n};\n\nexport default TagList;\n","import { Link } from 'gatsby';\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport TextEllipsis from '../atoms/TextEllipsis';\n\nconst Container = styled.div`\n  padding: 0 10px 10px 10px;\n  width: 100%;\n\n  @media all and (min-width: 992px) {\n    display: ${props => props.display || 'inline-block'};\n    width: 25%;\n  }\n`;\n\nconst Cover = styled(Link)`\n  background-image: url(${props => props.image});\n  background-position: 50% 50%;\n  background-size: cover;\n  border-radius: 10px;\n  display: inline-block;\n  height: 100px;\n  margin: 0 !important;\n  width: 100%;\n\n  &:hover {\n    text-decoration: underline #fff;\n  }\n\n  div {\n    background-color: rgba(0, 0, 0, 0.6);\n    border-radius: inherit;\n    color: ${props => props.theme.recentpostitem.text};\n    display: flex;\n    flex-direction: column;\n    height: 100%;\n    justify-content: flex-end;\n    padding: 10px;\n\n    p {\n      font-weight: bold;\n    }\n\n    span {\n      font-size: 12px;\n    }\n  }\n\n  @media all and (min-width: 992px) {\n    height: 120px;\n  }\n`;\n\nconst RecentPostItem = ({ data }) => {\n  const link = data.node.fields.slug;\n  const node = data.node.frontmatter;\n  const image = !!node.cover ? node.cover.childImageSharp.fixed.src : '';\n\n  return (\n    <Container>\n      <Cover image={image} to={link}>\n        <div>\n          <TextEllipsis line={2} text={node.title} />\n          <span>{node.date}</span>\n        </div>\n      </Cover>\n    </Container>\n  );\n};\n\nexport default RecentPostItem;\n","import { Link } from 'gatsby';\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport RecentPostItem from '../molecules/RecentPostItem';\n\nconst PostList = styled.div`\n  #title {\n    color: ${props => props.theme.recentpostlist.header};\n    font-weight: bold;\n    margin: 0;\n    padding: 0 10px 10px 10px;\n\n    a {\n      color: ${props => props.theme.recentpostlist.category};\n\n      &:hover {\n        text-decoration: underline;\n      }\n    }\n  }\n`;\n\nconst RecentPostList = ({ category, data }) => {\n  return (\n    <PostList>\n      <div id=\"title\">\n        Recent \"<Link to={`/${category}`}>{category}</Link>\" Posts\n      </div>\n      {data.map((node, index) => (\n        <RecentPostItem data={node} key={index} />\n      ))}\n    </PostList>\n  );\n};\n\nexport default RecentPostList;\n","import { graphql } from 'gatsby';\nimport React from 'react';\nimport styled from 'styled-components';\n\nimport PostInfo from '../molecules/PostInfo';\nimport TagList from '../molecules/TagList';\nimport RecentPostList from '../organisms/RecentPostList';\nimport SEO from '../SEO';\nimport Layout from './Layout';\n\nconst PostHeader = styled.div`\n  h1 {\n    border: none;\n    color: ${props => props.theme.blogpost.title};\n    margin-bottom: 10px;\n    padding: 0;\n  }\n\n  hr {\n    background-color: ${props => props.theme.blogpost.hr};\n    margin: 20px 0 40px 0;\n  }\n\n  div {\n    color: ${props => props.theme.blogpost.info};\n\n    #circle {\n      background-color: ${props => props.theme.blogpost.info};\n    }\n  }\n`;\n\nconst PostContent = styled.div`\n  color: ${props => props.theme.blogpost.content.default};\n\n  a {\n    color: ${props => props.theme.blogpost.content.link};\n\n    &:hover {\n      text-decoration: underline;\n    }\n  }\n\n  .gatsby-highlight {\n    border-radius: 10px;\n    margin: 24px 0;\n\n    pre[class*='language-'] {\n      padding: 10px 15px;\n    }\n  }\n\n  blockquote {\n    border-left: 4px solid ${props => props.theme.blogpost.content.quote};\n    color: ${props => props.theme.blogpost.content.quote};\n    margin-left: 0;\n    margin-right: 0;\n    padding-left: calc(0.8125rem - 1px);\n  }\n`;\n\nconst PostFooter = styled.div`\n  margin-top: 40px;\n\n  hr {\n    background-color: ${props => props.theme.blogpost.hr};\n    margin: 20px 0;\n  }\n`;\n\nconst BlogPost = props => {\n  const post = props.data.markdownRemark;\n  const siteTitle = props.data.site.siteMetadata.title;\n  const {\n    title,\n    date,\n    category,\n    tags,\n    cover,\n  } = props.data.markdownRemark.frontmatter;\n  const { recent } = props.pageContext;\n\n  return (\n    <Layout activeMenu={category} location={props.location} title={siteTitle}>\n      <SEO\n        description={post.excerpt}\n        image={!!cover && cover.childImageSharp.fluid.src}\n        keywords={tags || []}\n        title={title}\n      />\n      <PostHeader>\n        <h1>{title}</h1>\n        <PostInfo category={category} date={date} link />\n        <hr />\n      </PostHeader>\n      <PostContent>\n        <div\n          className=\"markdown-body\"\n          dangerouslySetInnerHTML={{ __html: post.html }}\n        />\n      </PostContent>\n      <PostFooter>\n        <TagList data={tags} />\n        <hr />\n        {category && <RecentPostList category={category} data={recent} />}\n      </PostFooter>\n    </Layout>\n  );\n};\n\nexport default BlogPost;\n\nexport const pageQuery = graphql`\n  query BlogPostBySlug($slug: String!) {\n    site {\n      siteMetadata {\n        title\n        authorNickName\n      }\n    }\n    markdownRemark(fields: { slug: { eq: $slug } }) {\n      id\n      excerpt(format: MARKDOWN)\n      html\n      frontmatter {\n        title\n        date(formatString: \"YYYY-MM-DD\")\n        category\n        tags\n        cover {\n          childImageSharp {\n            fluid(maxWidth: 500) {\n              src\n            }\n          }\n        }\n      }\n    }\n  }\n`;\n"],"sourceRoot":""}